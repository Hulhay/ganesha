// Code generated by MockGen. DO NOT EDIT.
// Source: genre_service.go

// Package genre is a generated GoMock package.
package genre

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hulhay/ganesha/models"
)

// MockgenreRepo is a mock of genreRepo interface.
type MockgenreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockgenreRepoMockRecorder
}

// MockgenreRepoMockRecorder is the mock recorder for MockgenreRepo.
type MockgenreRepoMockRecorder struct {
	mock *MockgenreRepo
}

// NewMockgenreRepo creates a new mock instance.
func NewMockgenreRepo(ctrl *gomock.Controller) *MockgenreRepo {
	mock := &MockgenreRepo{ctrl: ctrl}
	mock.recorder = &MockgenreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgenreRepo) EXPECT() *MockgenreRepoMockRecorder {
	return m.recorder
}

// GetGenresFromDB mocks base method.
func (m *MockgenreRepo) GetGenresFromDB(ctx context.Context) ([]models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenresFromDB", ctx)
	ret0, _ := ret[0].([]models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenresFromDB indicates an expected call of GetGenresFromDB.
func (mr *MockgenreRepoMockRecorder) GetGenresFromDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenresFromDB", reflect.TypeOf((*MockgenreRepo)(nil).GetGenresFromDB), ctx)
}
